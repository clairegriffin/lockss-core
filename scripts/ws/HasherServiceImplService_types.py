##################################################
# file: HasherServiceImplService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py HasherService
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://hasher.ws.lockss.org/
##############################

class ns0:
    targetNamespace = "http://hasher.ws.lockss.org/"

    class hashAsynchronously_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://hasher.ws.lockss.org/"
        type = (schema, "hashAsynchronously")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.hashAsynchronously_Def.schema
            TClist = [GTD("http://hasher.ws.lockss.org/","hasherWsParams",lazy=False)(pname="hasherParams", aname="_hasherParams", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._hasherParams = None
                    return
            Holder.__name__ = "hashAsynchronously_Holder"
            self.pyclass = Holder

    class hasherWsParams_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://hasher.ws.lockss.org/"
        type = (schema, "hasherWsParams")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.hasherWsParams_Def.schema
            TClist = [ZSI.TC.String(pname="algorithm", aname="_algorithm", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="auId", aname="_auId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="challenge", aname="_challenge", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="excludeSuspectVersions", aname="_excludeSuspectVersions", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hashType", aname="_hashType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lower", aname="_lower", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="recordFilteredStream", aname="_recordFilteredStream", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="resultEncoding", aname="_resultEncoding", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="upper", aname="_upper", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url", aname="_url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="verifier", aname="_verifier", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._algorithm = None
                    self._auId = None
                    self._challenge = None
                    self._excludeSuspectVersions = None
                    self._hashType = None
                    self._lower = None
                    self._recordFilteredStream = None
                    self._resultEncoding = None
                    self._upper = None
                    self._url = None
                    self._verifier = None
                    return
            Holder.__name__ = "hasherWsParams_Holder"
            self.pyclass = Holder

    class hashAsynchronouslyResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://hasher.ws.lockss.org/"
        type = (schema, "hashAsynchronouslyResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.hashAsynchronouslyResponse_Def.schema
            TClist = [GTD("http://hasher.ws.lockss.org/","hasherWsAsynchronousResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "hashAsynchronouslyResponse_Holder"
            self.pyclass = Holder

    class hasherWsAsynchronousResult_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://hasher.ws.lockss.org/"
        type = (schema, "hasherWsAsynchronousResult")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.hasherWsAsynchronousResult_Def.schema
            TClist = [ZSI.TC.String(pname="requestId", aname="_requestId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="requestTime", aname="_requestTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.hasherWsResult_Def not in ns0.hasherWsAsynchronousResult_Def.__bases__:
                bases = list(ns0.hasherWsAsynchronousResult_Def.__bases__)
                bases.insert(0, ns0.hasherWsResult_Def)
                ns0.hasherWsAsynchronousResult_Def.__bases__ = tuple(bases)

            ns0.hasherWsResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class hasherWsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://hasher.ws.lockss.org/"
        type = (schema, "hasherWsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.hasherWsResult_Def.schema
            TClist = [ZSI.TC.Base64String(pname="blockFileDataHandler", aname="_blockFileDataHandler", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="blockFileName", aname="_blockFileName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="bytesHashed", aname="_bytesHashed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="elapsedTime", aname="_elapsedTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="errorMessage", aname="_errorMessage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="filesHashed", aname="_filesHashed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname="hashResult", aname="_hashResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname="recordFileDataHandler", aname="_recordFileDataHandler", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="recordFileName", aname="_recordFileName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="startTime", aname="_startTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._blockFileDataHandler = None
                    self._blockFileName = None
                    self._bytesHashed = None
                    self._elapsedTime = None
                    self._errorMessage = None
                    self._filesHashed = None
                    self._hashResult = None
                    self._recordFileDataHandler = None
                    self._recordFileName = None
                    self._startTime = None
                    self._status = None
                    return
            Holder.__name__ = "hasherWsResult_Holder"
            self.pyclass = Holder

    class lockssWebServicesFaultInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://hasher.ws.lockss.org/"
        type = (schema, "lockssWebServicesFaultInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.lockssWebServicesFaultInfo_Def.schema
            TClist = [ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    return
            Holder.__name__ = "lockssWebServicesFaultInfo_Holder"
            self.pyclass = Holder

    class hash_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://hasher.ws.lockss.org/"
        type = (schema, "hash")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.hash_Def.schema
            TClist = [GTD("http://hasher.ws.lockss.org/","hasherWsParams",lazy=False)(pname="hasherParams", aname="_hasherParams", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._hasherParams = None
                    return
            Holder.__name__ = "hash_Holder"
            self.pyclass = Holder

    class hashResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://hasher.ws.lockss.org/"
        type = (schema, "hashResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.hashResponse_Def.schema
            TClist = [GTD("http://hasher.ws.lockss.org/","hasherWsResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "hashResponse_Holder"
            self.pyclass = Holder

    class getAsynchronousHashResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://hasher.ws.lockss.org/"
        type = (schema, "getAsynchronousHashResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getAsynchronousHashResult_Def.schema
            TClist = [ZSI.TC.String(pname="requestId", aname="_requestId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestId = None
                    return
            Holder.__name__ = "getAsynchronousHashResult_Holder"
            self.pyclass = Holder

    class getAsynchronousHashResultResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://hasher.ws.lockss.org/"
        type = (schema, "getAsynchronousHashResultResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getAsynchronousHashResultResponse_Def.schema
            TClist = [GTD("http://hasher.ws.lockss.org/","hasherWsAsynchronousResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getAsynchronousHashResultResponse_Holder"
            self.pyclass = Holder

    class removeAsynchronousHashRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://hasher.ws.lockss.org/"
        type = (schema, "removeAsynchronousHashRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeAsynchronousHashRequest_Def.schema
            TClist = [ZSI.TC.String(pname="requestId", aname="_requestId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestId = None
                    return
            Holder.__name__ = "removeAsynchronousHashRequest_Holder"
            self.pyclass = Holder

    class removeAsynchronousHashRequestResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://hasher.ws.lockss.org/"
        type = (schema, "removeAsynchronousHashRequestResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeAsynchronousHashRequestResponse_Def.schema
            TClist = [GTD("http://hasher.ws.lockss.org/","hasherWsAsynchronousResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "removeAsynchronousHashRequestResponse_Holder"
            self.pyclass = Holder

    class getAllAsynchronousHashResults_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://hasher.ws.lockss.org/"
        type = (schema, "getAllAsynchronousHashResults")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getAllAsynchronousHashResults_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getAllAsynchronousHashResults_Holder"
            self.pyclass = Holder

    class getAllAsynchronousHashResultsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://hasher.ws.lockss.org/"
        type = (schema, "getAllAsynchronousHashResultsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getAllAsynchronousHashResultsResponse_Def.schema
            TClist = [GTD("http://hasher.ws.lockss.org/","hasherWsAsynchronousResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getAllAsynchronousHashResultsResponse_Holder"
            self.pyclass = Holder

    class getAllAsynchronousHashResults_Dec(ElementDeclaration):
        literal = "getAllAsynchronousHashResults"
        schema = "http://hasher.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://hasher.ws.lockss.org/","getAllAsynchronousHashResults")
            kw["aname"] = "_getAllAsynchronousHashResults"
            if ns0.getAllAsynchronousHashResults_Def not in ns0.getAllAsynchronousHashResults_Dec.__bases__:
                bases = list(ns0.getAllAsynchronousHashResults_Dec.__bases__)
                bases.insert(0, ns0.getAllAsynchronousHashResults_Def)
                ns0.getAllAsynchronousHashResults_Dec.__bases__ = tuple(bases)

            ns0.getAllAsynchronousHashResults_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getAllAsynchronousHashResults_Dec_Holder"

    class getAllAsynchronousHashResultsResponse_Dec(ElementDeclaration):
        literal = "getAllAsynchronousHashResultsResponse"
        schema = "http://hasher.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://hasher.ws.lockss.org/","getAllAsynchronousHashResultsResponse")
            kw["aname"] = "_getAllAsynchronousHashResultsResponse"
            if ns0.getAllAsynchronousHashResultsResponse_Def not in ns0.getAllAsynchronousHashResultsResponse_Dec.__bases__:
                bases = list(ns0.getAllAsynchronousHashResultsResponse_Dec.__bases__)
                bases.insert(0, ns0.getAllAsynchronousHashResultsResponse_Def)
                ns0.getAllAsynchronousHashResultsResponse_Dec.__bases__ = tuple(bases)

            ns0.getAllAsynchronousHashResultsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getAllAsynchronousHashResultsResponse_Dec_Holder"

    class getAsynchronousHashResult_Dec(ElementDeclaration):
        literal = "getAsynchronousHashResult"
        schema = "http://hasher.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://hasher.ws.lockss.org/","getAsynchronousHashResult")
            kw["aname"] = "_getAsynchronousHashResult"
            if ns0.getAsynchronousHashResult_Def not in ns0.getAsynchronousHashResult_Dec.__bases__:
                bases = list(ns0.getAsynchronousHashResult_Dec.__bases__)
                bases.insert(0, ns0.getAsynchronousHashResult_Def)
                ns0.getAsynchronousHashResult_Dec.__bases__ = tuple(bases)

            ns0.getAsynchronousHashResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getAsynchronousHashResult_Dec_Holder"

    class getAsynchronousHashResultResponse_Dec(ElementDeclaration):
        literal = "getAsynchronousHashResultResponse"
        schema = "http://hasher.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://hasher.ws.lockss.org/","getAsynchronousHashResultResponse")
            kw["aname"] = "_getAsynchronousHashResultResponse"
            if ns0.getAsynchronousHashResultResponse_Def not in ns0.getAsynchronousHashResultResponse_Dec.__bases__:
                bases = list(ns0.getAsynchronousHashResultResponse_Dec.__bases__)
                bases.insert(0, ns0.getAsynchronousHashResultResponse_Def)
                ns0.getAsynchronousHashResultResponse_Dec.__bases__ = tuple(bases)

            ns0.getAsynchronousHashResultResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getAsynchronousHashResultResponse_Dec_Holder"

    class hash_Dec(ElementDeclaration):
        literal = "hash"
        schema = "http://hasher.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://hasher.ws.lockss.org/","hash")
            kw["aname"] = "_hash"
            if ns0.hash_Def not in ns0.hash_Dec.__bases__:
                bases = list(ns0.hash_Dec.__bases__)
                bases.insert(0, ns0.hash_Def)
                ns0.hash_Dec.__bases__ = tuple(bases)

            ns0.hash_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "hash_Dec_Holder"

    class hashAsynchronously_Dec(ElementDeclaration):
        literal = "hashAsynchronously"
        schema = "http://hasher.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://hasher.ws.lockss.org/","hashAsynchronously")
            kw["aname"] = "_hashAsynchronously"
            if ns0.hashAsynchronously_Def not in ns0.hashAsynchronously_Dec.__bases__:
                bases = list(ns0.hashAsynchronously_Dec.__bases__)
                bases.insert(0, ns0.hashAsynchronously_Def)
                ns0.hashAsynchronously_Dec.__bases__ = tuple(bases)

            ns0.hashAsynchronously_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "hashAsynchronously_Dec_Holder"

    class hashAsynchronouslyResponse_Dec(ElementDeclaration):
        literal = "hashAsynchronouslyResponse"
        schema = "http://hasher.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://hasher.ws.lockss.org/","hashAsynchronouslyResponse")
            kw["aname"] = "_hashAsynchronouslyResponse"
            if ns0.hashAsynchronouslyResponse_Def not in ns0.hashAsynchronouslyResponse_Dec.__bases__:
                bases = list(ns0.hashAsynchronouslyResponse_Dec.__bases__)
                bases.insert(0, ns0.hashAsynchronouslyResponse_Def)
                ns0.hashAsynchronouslyResponse_Dec.__bases__ = tuple(bases)

            ns0.hashAsynchronouslyResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "hashAsynchronouslyResponse_Dec_Holder"

    class hashResponse_Dec(ElementDeclaration):
        literal = "hashResponse"
        schema = "http://hasher.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://hasher.ws.lockss.org/","hashResponse")
            kw["aname"] = "_hashResponse"
            if ns0.hashResponse_Def not in ns0.hashResponse_Dec.__bases__:
                bases = list(ns0.hashResponse_Dec.__bases__)
                bases.insert(0, ns0.hashResponse_Def)
                ns0.hashResponse_Dec.__bases__ = tuple(bases)

            ns0.hashResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "hashResponse_Dec_Holder"

    class removeAsynchronousHashRequest_Dec(ElementDeclaration):
        literal = "removeAsynchronousHashRequest"
        schema = "http://hasher.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://hasher.ws.lockss.org/","removeAsynchronousHashRequest")
            kw["aname"] = "_removeAsynchronousHashRequest"
            if ns0.removeAsynchronousHashRequest_Def not in ns0.removeAsynchronousHashRequest_Dec.__bases__:
                bases = list(ns0.removeAsynchronousHashRequest_Dec.__bases__)
                bases.insert(0, ns0.removeAsynchronousHashRequest_Def)
                ns0.removeAsynchronousHashRequest_Dec.__bases__ = tuple(bases)

            ns0.removeAsynchronousHashRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeAsynchronousHashRequest_Dec_Holder"

    class removeAsynchronousHashRequestResponse_Dec(ElementDeclaration):
        literal = "removeAsynchronousHashRequestResponse"
        schema = "http://hasher.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://hasher.ws.lockss.org/","removeAsynchronousHashRequestResponse")
            kw["aname"] = "_removeAsynchronousHashRequestResponse"
            if ns0.removeAsynchronousHashRequestResponse_Def not in ns0.removeAsynchronousHashRequestResponse_Dec.__bases__:
                bases = list(ns0.removeAsynchronousHashRequestResponse_Dec.__bases__)
                bases.insert(0, ns0.removeAsynchronousHashRequestResponse_Def)
                ns0.removeAsynchronousHashRequestResponse_Dec.__bases__ = tuple(bases)

            ns0.removeAsynchronousHashRequestResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeAsynchronousHashRequestResponse_Dec_Holder"

    class LockssWebServicesFault_Dec(ElementDeclaration):
        literal = "LockssWebServicesFault"
        schema = "http://hasher.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://hasher.ws.lockss.org/","LockssWebServicesFault")
            kw["aname"] = "_LockssWebServicesFault"
            if ns0.lockssWebServicesFaultInfo_Def not in ns0.LockssWebServicesFault_Dec.__bases__:
                bases = list(ns0.LockssWebServicesFault_Dec.__bases__)
                bases.insert(0, ns0.lockssWebServicesFaultInfo_Def)
                ns0.LockssWebServicesFault_Dec.__bases__ = tuple(bases)

            ns0.lockssWebServicesFaultInfo_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "LockssWebServicesFault_Dec_Holder"

# end class ns0 (tns: http://hasher.ws.lockss.org/)
